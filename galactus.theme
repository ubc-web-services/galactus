<?php

/**
 * @file
 * Functions to support theming in the galactus theme.
 */

use Drupal\Core\Form\FormStateInterface;
use Drupal\views\Form\ViewsForm;

/**
 * Implements hook_page_attachments_alter().
 */
function galactus_page_attachments_alter(array &$page) {
  $clf_source = theme_get_setting('clf_source');
  $use_minimal_clf = theme_get_setting('clf_override');
  $clf_theme_color = theme_get_setting('clf_theme_colour');
  $clf_layout = theme_get_setting('clf_layout');

  if ($clf_layout == 'full' || $clf_layout == 'fluid') {
    $clf_layout_id = 'fw';
  }
  else {
    $clf_layout_id = 'sw';
  }

  // Switch between minimal and full CLF libraries.
  if ($clf_source == 'min' || $use_minimal_clf) {
    $page['#attached']['library'][] = 'galactus/clf-' . $clf_layout_id . '-' . $clf_theme_color;
  }
  elseif ($clf_source == 'local') {
    $page['#attached']['library'][] = 'galactus/clf-local';
  }
  else {
    // Use full CLF library.
    $page['#attached']['library'][] = 'galactus/clf-cdn-fw-' . $clf_theme_color;
  }
}

/**
 * Implements hook_preprocess_HOOK() for HTML document templates.
 *
 * Adds body classes if certain regions have content.
 */
function galactus_preprocess_html(&$variables) {

  // Add in custom theme variables so they are available in html.twig.
  $variables['color_option'] = theme_get_setting('clf_theme_colour');
  $variables['layout_option2'] = theme_get_setting('clf_layout');
  $variables['local_clf'] = theme_get_setting('clf_override');
  $variables['unuglify'] = theme_get_setting('unuglify') ? TRUE : FALSE;

  // Add Apple Touch Icons.
  $clf_apple_touch_144 = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => 'https://cdn.ubc.ca/clf/7.0.4/img/apple-touch-icon-144-precomposed.png',
      'rel' => 'apple-touch-icon-precomposed',
      'sizes' => '144x144',
    ],
  ];
  $clf_apple_touch_114 = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => 'https://cdn.ubc.ca/clf/7.0.4/img/apple-touch-icon-114-precomposed.png',
      'rel' => 'apple-touch-icon-precomposed',
      'sizes' => '114x114',
    ],
  ];
  $clf_apple_touch_72 = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => 'https://cdn.ubc.ca/clf/7.0.4/img/apple-touch-icon-72-precomposed.png',
      'rel' => 'apple-touch-icon-precomposed',
      'sizes' => '72x72',
    ],
  ];
  $clf_apple_touch = [
    '#tag' => 'link',
    '#attributes' => [
      'href' => 'https://cdn.ubc.ca/clf/7.0.4/img/apple-touch-icon-57-precomposed.png',
      'rel' => 'apple-touch-icon-precomposed',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$clf_apple_touch_144, 'clf-apple-touch-144'];
  $variables['page']['#attached']['html_head'][] = [$clf_apple_touch_114, 'clf-apple-touch-114'];
  $variables['page']['#attached']['html_head'][] = [$clf_apple_touch_72, 'clf-apple-touch-72'];
  $variables['page']['#attached']['html_head'][] = [$clf_apple_touch, 'clf-apple-touch'];

  /* Add a NOFOLLOW tag if the site is not meant for production */
  if (theme_get_setting('clf_noindex') == TRUE) {
    $nofollow = [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'robots',
        'content' => 'noindex, nofollow',
      ],
    ];
    $variables['page']['#attached']['html_head'][] = [$nofollow, 'nofollow'];
  }
  $prefetch = [
    '#type' => 'html_tag',
    '#tag' => 'link',
    '#attributes' => [
      'rel' => 'dns-prefetch',
      'href' => 'https://cdn.ubc.ca',
    ],
  ];
  $variables['page']['#attached']['html_head'][] = [$prefetch, 'prefetch'];

  /* Add Google nad Bing Verification Tags */
  $googleVerificationCode = theme_get_setting('clf_google_verify');
  if (!empty(theme_get_setting('clf_google_verify'))) {
    $googleverify = [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'google-site-verification',
        'content' => $googleVerificationCode,
      ],
    ];
    $variables['page']['#attached']['html_head'][] = [$googleverify, 'googleverify'];
  }

  $bingVerificationCode = theme_get_setting('clf_bing_verify');
  if (!empty(theme_get_setting('clf_bing_verify'))) {
    $bingverify = [
      '#type' => 'html_tag',
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'msvalidate.01',
        'content' => $bingVerificationCode,
      ],
    ];
    $variables['page']['#attached']['html_head'][] = [$bingverify, 'bingverify'];
  }

  // Add information about the number of sidebars.
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-two-sidebars';
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-first';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['attributes']['class'][] = 'layout-one-sidebar';
    $variables['attributes']['class'][] = 'layout-sidebar-second';
  }
  else {
    $variables['attributes']['class'][] = 'layout-no-sidebars';
  }
  if (!empty($variables['page']['featured'])) {
    $variables['attributes']['class'][] = 'featured';
  }

  // Add inline banner colour.
  $unit_color_option = theme_get_setting('clf_theme_unit_colour');
  if (!empty($unit_color_option)) {
    $variables['page']['#attached']['html_head'][] = [
      [
        '#tag' => 'style',
        '#value' => '#ubc7-unit { background-color: #' . $unit_color_option . ' !important; }',
      ],
      'unit-colour-css',
    ];
  }

  // Add sticky class and library.
  if (theme_get_setting('clf_navigation_sticky') == TRUE) {
    $variables['attributes']['class'][] = 'clf-navigation-sticky';
    $variables['#attached']['library'][] = 'galactus/clf-sticky-navigation';
  }
  // Add secondary navigation class and library.
  if (theme_get_setting('clf_secondarynavoption') == TRUE) {
    $variables['attributes']['class'][] = 'clf-navigation-secondary';
    $variables['#attached']['library'][] = 'galactus/clf-secondary-navigation';
  }

  // Add navigation class and library.
  if (theme_get_setting('clf_navigation_placement') == 'default') {
    $variables['navigation_placement'] = FALSE;
    $variables['attributes']['class'][] = 'clf-navigation-default';
  }
  else {
    $variables['attributes']['class'][] = 'clf-navigation-slidein';
    $variables['#attached']['library'][] = 'galactus/clf-slidein-navigation';
  }

  // Add Whitney library if set.
  if (theme_get_setting('clf_use_whitney') == 'dev') {
    $variables['#attached']['library'][] = 'galactus/clf-whitney-dev';
  }
  if (theme_get_setting('clf_use_whitney') == 'prod') {
    $variables['#attached']['library'][] = 'galactus/clf-whitney-prod';
  }

  // Add Fontawesome library if set.
  if (theme_get_setting('clf_fontawesome') == TRUE) {
    $variables['#attached']['library'][] = 'galactus/clf-fontawesome';
  }

  // Add a class to define the active CLF theme colour
  $theme_color_option = theme_get_setting('clf_theme_colour');
  $variables['attributes']['class'][] = 'legacy--' . $theme_color_option;

  // keep for legacy purposes, but no longer used by the theme
  $clfcolour = theme_get_setting('clf_theme_colour');
  $variables['attributes']['class'][] = 'clf-theme-' . $clfcolour;

  // Add a class to define the active CLF theme layout
  if (theme_get_setting('clf_layout') == 'fluid') {
    $variables['attributes']['class'][] = 'layout--full-width-left';
  }

  if (theme_get_setting('clf_layout') == 'full') {
    $variables['attributes']['class'][] = 'layout--full-width';
  }

  // Add a class if the faulty option is shown
  if (theme_get_setting('clf_faculty') == TRUE) {
    $variables['attributes']['class'][] = 'show-faculty';
  }

}

/**
 * Implements hook_preprocess_HOOK() for page templates.
 */
function galactus_preprocess_page(&$variables) {
  // Since the title and the shortcut link are both block level elements,
  // positioning them next to each other is much simpler with a wrapper div.
  if (!empty($variables['title_suffix']['add_or_remove_shortcut']) && $variables['title']) {
    // Add a wrapper div using the title_prefix and title_suffix render
    // elements.
    $variables['title_prefix']['shortcut_wrapper'] = [
      '#markup' => '<div class="clearfix shortcut-wrapper">',
      '#weight' => 100,
    ];
    $variables['title_suffix']['shortcut_wrapper'] = [
      '#markup' => '</div>',
      '#weight' => -99,
    ];
    // Make sure the shortcut link is the first item in title_suffix.
    $variables['title_suffix']['add_or_remove_shortcut']['#weight'] = -100;
  }

  // Add in our custom theme variables so we can use them in page.twig
  // general options.
  $variables['layout_option'] = theme_get_setting('clf_layout');
  $variables['mobilenav_option'] = theme_get_setting('clf_navoption') ? FALSE : TRUE;
  $variables['campus_option'] = theme_get_setting('clf_unit_campus');
  $variables['faculty_option'] = theme_get_setting('clf_faculty') ? FALSE : TRUE;
  $variables['faculty_name'] = theme_get_setting('clf_faculty_name');
  $variables['unit_name'] = theme_get_setting('clf_unitname');

  // Search options.
  $variables['searchlabel_option'] = theme_get_setting('clf_searchlabel');
  $variables['searchdomain_option'] = theme_get_setting('clf_searchdomain');

  // Content layout classes.
  $variables['content_row_class_option'] = theme_get_setting('clf_content_row_class');
  if (!empty($variables['page']['sidebar_first']) && !empty($variables['page']['sidebar_second'])) {
    $variables['content_class_option'] = theme_get_setting('clf_two_sidebar_class');
    $variables['sidebar_first_class_option'] = theme_get_setting('clf_two_sidebar_class_sidebar1');
    $variables['sidebar_second_class_option'] = theme_get_setting('clf_two_sidebar_class_sidebar2');
  }
  elseif (!empty($variables['page']['sidebar_first'])) {
    $variables['content_class_option'] = theme_get_setting('clf_one_sidebar_class');
    $variables['sidebar_first_class_option'] = theme_get_setting('clf_one_sidebar_class_sidebar');
    $variables['sidebar_second_class_option'] = '';
  }
  elseif (!empty($variables['page']['sidebar_second'])) {
    $variables['content_class_option'] = theme_get_setting('clf_one_sidebar_class');
    $variables['sidebar_first_class_option'] = '';
    $variables['sidebar_second_class_option'] = theme_get_setting('clf_one_sidebar_class_sidebar');
  }
  else {
    $variables['content_class_option'] = theme_get_setting('clf_no_sidebar_class');
    $variables['sidebar_first_class_option'] = '';
    $variables['sidebar_second_class_option'] = '';
  }

  // Navigation options.
  if (theme_get_setting('clf_navigation_placement') == 'default') {
    $variables['navigation_placement_default'] = TRUE;
    $variables['navigation_placement'] = FALSE;
  }
  else {
    $variables['navigation_placement_drawer'] = TRUE;
    $variables['navigation_placement'] = theme_get_setting('clf_navigation_placement');
  }

  // Footer options.
  $variables['address_option'] = theme_get_setting('clf_streetaddr');
  $variables['locality_option'] = theme_get_setting('clf_locality');
  $variables['region_option'] = theme_get_setting('clf_region');
  $variables['country_option'] = theme_get_setting('clf_country');
  $variables['postal_option'] = theme_get_setting('clf_postal');
  $variables['phone_option'] = theme_get_setting('clf_telephone');
  $variables['fax_option'] = theme_get_setting('clf_fax');
  $variables['email_option'] = theme_get_setting('clf_email');
  $variables['website_option'] = theme_get_setting('clf_website');

  // Social media options.
  $variables['facebook_option'] = theme_get_setting('clf_social_facebook');
  $variables['twitter_option'] = theme_get_setting('clf_social_twitter');
  $variables['linkedin_option'] = theme_get_setting('clf_social_linkedin');
  $variables['instagram_option'] = theme_get_setting('clf_social_instagram');
  $variables['youtube_option'] = theme_get_setting('clf_social_youtube');

}

/**
 * Implements hook_preprocess_HOOK() for maintenance-page.html.twig.
 */
function galactus_preprocess_maintenance_page(&$variables) {
  // By default, site_name is set to Drupal if no db connection is available
  // or during site installation. Setting site_name to an empty string makes
  // the site and update pages look cleaner.
  // @see template_preprocess_maintenance_page
  if (!$variables['db_is_active']) {
    $variables['site_name'] = '';
  }

  // Galactus has custom styling for the maintenance page.
  $variables['#attached']['library'][] = 'galactus/maintenance_page';
}

/**
 * Implements hook_preprocess_HOOK() for node.html.twig.
 */
function galactus_preprocess_node(&$variables) {
  // Remove the "Add new comment" link on teasers or when the comment form is
  // displayed on the page.
  if ($variables['teaser'] || !empty($variables['content']['comments']['comment_form'])) {
    unset($variables['content']['links']['comment']['#links']['comment-add']);
  }

  // Add node--node_type--view_mode.html.twig suggestions.
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['elements']['#node']->bundle() . '__' . $variables['view_mode'];

  // Add node--view_mode.html.twig suggestions.
  $variables['theme_hook_suggestions'][] = 'node__' . $variables['view_mode'];
}

/**
 * Implements hook_preprocess_HOOK() for block.html.twig.
 */
function galactus_preprocess_block(&$variables) {
  // Add a clearfix class to system branding blocks.
  if ($variables['plugin_id'] == 'system_branding_block') {
    $variables['attributes']['class'][] = 'clearfix';
  }
}

/**
 * Implements hook_preprocess_HOOK() for menu.html.twig.
 */
function galactus_preprocess_menu(&$variables) {
  $variables['attributes']['class'][] = 'clearfix';
}

/**
 * Implements hook_preprocess_HOOK() for field.html.twig.
 *
 * @see template_preprocess_field()
 */
function galactus_preprocess_field(&$variables) {
  $element = $variables['element'];
  if ($element['#field_type'] == 'taxonomy_term_reference') {
    $variables['title_attributes']['class'][] = 'field-label';
    if ($variables['element']['#label_display'] == 'inline') {
      $variables['title_attributes']['class'][] = 'inline';
    }
  }
}

/**
 * Implements hook_form_alter() for forms.
 */
function galactus_form_alter(array &$form, FormStateInterface $form_state, $form_id) {
  $form_object = $form_state->getFormObject();
  if ($form_object instanceof ViewsForm && strpos($form_object->getBaseFormId(), 'views_form_media_library') === 0) {
    $form['#attributes']['class'][] = 'media-library-views-form';
  }
  if ($form_id == 'search_block_form') {
    $form['keys']['#theme_wrappers'] = NULL;
    $form['keys']['#prefix'] = '<div class="form-inline input-append">';
    $form['keys']['#attributes']['placeholder'] = t('Search...');
    $form['actions']['#theme_wrappers'] = NULL;
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary';
    $form['actions']['#suffix'] = '</div>';
  }
  if ($form_id == 'user_login_form') {
    $form['actions']['#theme_wrappers'] = NULL;
    $form['actions']['submit']['#attributes']['class'][] = 'btn btn-primary btn-block';
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter() for page.html.twig.
 */
function galactus_theme_suggestions_page_alter(array &$suggestions, array $variables) {
  // Get current node.
  if (($node = \Drupal::request()->attributes->get('node')) && (strpos($_SERVER['REQUEST_URI'], "revisions") == false)) {
    array_splice($suggestions, 1, 0, 'page__node_type__' . $node->getType());
  }
}

/**
 * Implements hook_preprocess_links__media_library_menu().
 *
 * This targets the menu of available media types in the media library's modal
 * dialog.
 *
 * @todo Do this in the relevant template once
 *   https://www.drupal.org/project/drupal/issues/3088856 is resolved.
 */
function galactus_preprocess_links__media_library_menu(array &$variables) {
  foreach ($variables['links'] as &$link) {
    $link['link']['#options']['attributes']['class'][] = 'media-library-menu__link';
  }
}

/**
 * Implements hook_preprocess_image_widget().
 */
function galactus_preprocess_image_widget(array &$variables) {
  $data = &$variables['data'];

  // This prevents image widget templates from rendering preview container HTML
  // to users that do not have permission to access these previews.
  // @todo revisit in https://drupal.org/node/953034
  // @todo revisit in https://drupal.org/node/3114318
  if (isset($data['preview']['#access']) && $data['preview']['#access'] === FALSE) {
    unset($data['preview']);
  }
}

/**
 * Implements template_preprocess_HOOK() for fieldset.
 */
function galactus_preprocess_fieldset(&$variables) {
  $element = $variables['element'];
  $composite_types = ['checkboxes', 'radios'];

  if (!empty($element['#type']) && in_array($element['#type'], $composite_types) && !empty($variables['element']['#children_errors'])) {
    $variables['legend_span']['attributes']->addClass('has-error');
  }

  if (!empty($element['#disabled'])) {
    $variables['legend_span']['attributes']->addClass('is-disabled');

    if (!empty($variables['description']) && !empty($variables['description']['attributes'])) {
      $variables['description']['attributes']->addClass('is-disabled');
    }
  }

  // Remove 'container-inline' class from the main attributes and add a flag
  // instead.
  // @todo Remove this after https://www.drupal.org/node/3059593 has been
  //   resolved.
  if (!empty($variables['attributes']['class'])) {
    $container_inline_key = array_search('container-inline', $variables['attributes']['class']);

    if ($container_inline_key !== FALSE) {
      unset($variables['attributes']['class'][$container_inline_key]);
      $variables['inline_items'] = TRUE;
    }
  }
}

/**
 * Implements hook_library_info_build().
 */
function galactus_library_info_build() {
  $libraries = [];

  $library_definitions = [
    # Full-width, White on Blue.
    'clf-cdn-fw-wb' => 'https://cdn.ubc.ca/clf/7.0.4/css/ubc-clf-full.min.css',
    # Full-width, Blue on White.
    'clf-cdn-fw-bw' => 'https://cdn.ubc.ca/clf/7.0.4/css/ubc-clf-full-bw.min.css',
    # Full-width, Grey on White.
    'clf-cdn-fw-wg' => 'https://cdn.ubc.ca/clf/7.0.4/css/ubc-clf-full-wg.min.css',
    # Full-width, White on Grey.
    'clf-cdn-fw-gw' => 'https://cdn.ubc.ca/clf/7.0.4/css/ubc-clf-full-gw.min.css',

    ### Minimal CLF Versions ###

    # Full-width, White on Blue.
    'clf-fw-wb' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-full-7.0.4.css',
    # Full-width, Blue on White.
    'clf-fw-bw' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-full-7.0.4-bw.css',
    # Full-width, White on Grey.
    'clf-fw-wg' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-full-7.0.4-wg.css',
    # Full-width, Grey on White.
    'clf-fw-gw' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-full-7.0.4-gw.css',

    // Standard-width Minimal CLF.
    # Standard-width, White on Blue.
    'clf-sw-wb' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-7.0.4.css',
    # Standard-width, Blue on White.
    'clf-sw-bw' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-7.0.4-bw.css',
    # Standard-width, White on Grey.
    'clf-sw-wg' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-7.0.4-wg.css',
    # Standard-width, Grey on White.
    'clf-sw-gw' => 'https://cdn.ubc.ca/clf/7.0.4-minimal/css/minimal-clf-7.0.4-gw.css',
  ];

  // Build the libraries array
  foreach ($library_definitions as $name => $file) {
    $libraries[$name] = [
      'version' => '7.0.4',
      'css' => ['base' => [$file => ['type' => 'external']]],
      'dependencies' => ['galactus/cdn-clf-js'],
    ];

    // Add social icons only for minimal libraries.
    if (str_contains($file, 'minimal')) {
      $libraries[$name]['css']['theme'] = [
        'css/clf.social-icons.css' => [],
      ];
    }
  }

  // Common JS.
  $libraries['cdn-clf-js'] = [
    'version' => '7.0.4',
    'js' => ['https://cdn.ubc.ca/clf/7.0.4/js/ubc-clf.min.js' => []],
    'dependencies' => ['core/jquery'],
  ];

  return $libraries;
}
